{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "**1. PropositionaL Logic Operations**"
      ],
      "metadata": {
        "id": "Zx-smgT9wzCd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def and_operation(p, q):\n",
        "  return p and q\n",
        "\n",
        "def or_operation(p, q):\n",
        "  return p or q\n",
        "\n",
        "def not_operation(p):\n",
        "  return not p\n",
        "\n",
        "def implies_operation(p, q):\n",
        "  return not p or q"
      ],
      "metadata": {
        "id": "_n92uhdZ1ppj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Explanation:**\n",
        "\n",
        "- *AND* - returns True only if both inputs are True.\n",
        "- *OR* - returns True if at least one input is True.\n",
        "- *NOT* - inverts the input value.\n",
        "- *IMPLIES* - checks if one value implies another.\n",
        "- *EVALUATE* - replaces variables with actual values and evaluates the expression.\n"
      ],
      "metadata": {
        "id": "_dTMZG3xsPcz"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**2. Evaluate Logical Statements**"
      ],
      "metadata": {
        "id": "UVb0wK6qx3Bi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def evaluate (statement, values):\n",
        "  for prop, value in values.items():\n",
        "    statement = statement.replace(prop, str(value))\n",
        "  return eval(statement)"
      ],
      "metadata": {
        "id": "Cj5J81fPx_mH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Explanation:**\n",
        "\n",
        "*evaluate ()* - replaces propositions w/ their values and then evaluates it"
      ],
      "metadata": {
        "id": "JtCtddOms1vz"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**3. Predicate Logic Functions**"
      ],
      "metadata": {
        "id": "F4BsRlN9yUOl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def forall(predicate, domain):\n",
        "  return all(predicate(x) for x in domain)\n",
        "\n",
        "\n",
        "def exists(predicate, domain):\n",
        "  return any(predicate(x) for x in domain)\n"
      ],
      "metadata": {
        "id": "bTzrAUf1yYd3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Explanation:**\n",
        "\n",
        "*forall* - returns true if predicate is true for all elements in domain\n",
        "\n",
        "*exists* - returns true if predicate is true for at least one element in domain\n"
      ],
      "metadata": {
        "id": "8a6nJlvntKnt"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**4. Ai Agent: Book Recommendation**"
      ],
      "metadata": {
        "id": "JsKeq08Hyw5C"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def recommend_book(user_preferences, user_mood):\n",
        "\n",
        "  if and_operation(user_preferences[\"like_thrillers\"], user_mood[\"excited\"]):\n",
        "    return \"We recommend 'Gone Girl' for a thrilling read!\"\n",
        "\n",
        "  elif and_operation(user_preferences['like_romance'], not_operation(user_mood['sad'])):\n",
        "    return \"How about 'Pride and Prejudice' for a romantic escape?\"\n",
        "\n",
        "  elif exists(lambda x: x=='msytery', user_preferences['genres']):\n",
        "    return \"You might enjoy 'The Da Vinci Code' based on your taste in mysteries.\"\n",
        "\n",
        "  else:\n",
        "    return \"We suggest you try 'To Kill a Mockingbird' for a classic read.\""
      ],
      "metadata": {
        "id": "Usg9EQ9Dy3rM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Explanation:**\n",
        "\n",
        "Book Recommendation System (as an example):\n",
        "The **recommend_book** function uses propositional logic to decide on book recommendations based on user preferences and mood.\n",
        "\n",
        "- If the user likes thrillers and is excited, the system recommends a thriller.\n",
        "- If the user likes romance and isn't sad, it suggests a romance book.\n",
        "- If the user likes mysteries, it checks this condition and suggests a mystery.\n",
        "- If none of these conditions are met, it defaults to a general recommendation."
      ],
      "metadata": {
        "id": "CMXLci2ftlCd"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Summary**\n",
        "\n",
        "Function Definitions:\n",
        "   - **and_operation**, **or_operation**, **not_operation**, and **implies_operation** are standard propositional logic operations.\n",
        "   - ***evaluate*** evaluates logical statements by replacing propositions with their truth values.\n",
        "   - **forall** and **exists** handle predicate logic for a range of values.\n",
        "\n",
        "This notebook shows how propositional and predicate logic can be used in decision-making for an AI agent, and as shown through a simple book recommendation system.\n",
        "\n"
      ],
      "metadata": {
        "id": "M6N61zQe1KUg"
      }
    }
  ]
}